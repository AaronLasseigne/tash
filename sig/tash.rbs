module Tash
  VERSION: String

  class Tash[unchecked out K, unchecked out V] < Object
    include Enumerable[[ K, V ]]

    def self.[]: [U, V] (Tash[U, V]) -> Tash[U, V]
               | [U, V] (_ToHash[U, V]) { (U) -> unchecked out U } -> Tash[U, V]
               | [U, V] (Array[[ U, V ]])  { (U) -> unchecked out U } -> Tash[U, V]
               | (*untyped) { (U) -> unchecked out U } -> Tash[untyped, untyped]

    public

    def <: [A, B] (Hash[A, B]) -> bool

    def <=: [A, B] (Hash[A, B]) -> bool

    def ==: (untyped other) -> bool

    def >: [A, B] (Hash[A, B]) -> bool

    def >=: [A, B] (Hash[A, B]) -> bool

    def []: (K) -> V

    def []=: (K, V) -> V

    def assoc: (K) -> [ K, V ]?

    def clear: () -> self

    def compact: () -> Tash[K, V]

    def compact!: () -> self?

    def compare_by_identity: () -> self

    def compare_by_identity?: () -> bool

    def default: (?K) -> V?

    def default=: (V) -> V

    def default_proc: () -> (Proc | nil)

    def default_proc=: (Proc | _ToProc | nil) -> (Proc | _ToProc | nil)

    def delete: (K) -> V?
              | [U] (K) { (K) -> U } -> (U | V)

    def delete_if: () { (K, V) -> boolish } -> self
                 | () -> Enumerator[[ K, V ], self]

    def dig: (K, *untyped) -> untyped

    def each: () { ([ K, V ]) -> untyped } -> self
            | () -> ::Enumerator[[ K, V ], self]

    def each_key: () { (K) -> untyped } -> Tash[K, V]
                | () -> Enumerator[K, self]

    alias each_pair each

    def each_value: () { (V) -> untyped } -> self
                  | () -> Enumerator[V, self]

    def empty?: () -> bool

    def eql?: (untyped) -> bool

    def fetch: (K) -> V
             | [X] (K, X) -> (V | X)
             | [X] (K) { (K) -> X } -> (V | X)

    alias filter select

    alias has_key? key?

    alias include? has_key?

    def inspect: () -> String

    def key?: (K) -> bool

    def keys: () -> Array[K]

    def length: () -> Integer

    alias member? has_key?

    def select: () { (K, V) -> boolish } -> Tash[K, V]
              | () -> Enumerator[[ K, V ], Tash[K, V]]

    alias size length

    alias store []=

    def to_hash: () -> Hash[K, V]

    def transform_proc: () -> (Proc | nil)

    def values: () -> Array[V]

    private

    def initialize: () { (K) -> unchecked out K } -> void
  end
end
