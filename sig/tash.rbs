module Tash
  VERSION: String

  class Tash[unchecked out K, unchecked out V] < Object
    include Enumerable[[ K, V ]]

    def self.[]: [U, V] (Tash[U, V]) -> Tash[U, V]
               | [U, V] (_ToHash[U, V]) { (U) -> unchecked out U } -> Tash[U, V]
               | [U, V] (Array[[ U, V ]])  { (U) -> unchecked out U } -> Tash[U, V]
               | (*untyped) { (U) -> unchecked out U } -> Tash[untyped, untyped]

    public

    def <: [A, B] (Hash[A, B]) -> bool

    def <=: [A, B] (Hash[A, B]) -> bool

    def ==: (untyped other) -> bool

    def >: [A, B] (Hash[A, B]) -> bool

    def >=: [A, B] (Hash[A, B]) -> bool

    def []: (K) -> V

    alias []= store

    def clear: () -> self

    def each: () { ([ K, V ]) -> untyped } -> self
            | () -> ::Enumerator[[ K, V ], self]

    alias each_pair each

    def empty?: () -> bool

    def filter: () { (K, V) -> boolish } -> Tash[K, V]
              | () -> Enumerator[[ K, V ], Tash[K, V]]

    def has_key?: (K) -> bool

    alias include? has_key?

    def inspect: () -> String

    alias key? has_key?

    def keys: () -> Array[K]

    def length: () -> Integer

    alias member? has_key?

    alias select filter

    alias size length

    def store: (K, V) -> V

    def to_hash: () -> Hash[K, V]

    def values: () -> Array[V]

    private

    def initialize: () { (K) -> unchecked out K } -> void
  end
end
