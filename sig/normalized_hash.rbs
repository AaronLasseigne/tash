module Nash
  VERSION: String

  class Nash[unchecked out K, unchecked out V] < Object
    include Enumerable[[ K, V, K ]]

    def initialize: () { (K) -> unchecked out K } -> void

    def normalize: (K) -> unchecked out K

    def clear: () -> self

    def length: () -> Integer
    alias size length

    def ==: (untyped other) -> bool

    def []: (K) -> V

    def each: () { ([ K, V, K ]) -> untyped } -> self
            | () -> ::Enumerator[[ K, V, K ], self]
    alias each_pair each

    def has_key?: (K) -> bool
    alias key? has_key?
    alias include? has_key?
    alias member? has_key?

    def inspect: () -> String

    def keys: () -> Array[K]

    def store: (K, V) -> V
    alias []= store

    def to_hash: () -> Hash[K, V]

    def values: () -> Array[V]
  end
end
